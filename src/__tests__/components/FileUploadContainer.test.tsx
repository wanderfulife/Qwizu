import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport FileUploadContainer from '@/components/FileUpload/FileUploadContainer';\n\n// Mock the child components\njest.mock('@/components/FileUpload/SurveyFileUpload', () => {\n  return function MockSurveyFileUpload() {\n    return <div data-testid=\"survey-file-upload\">Survey File Upload</div>;\n  };\n});\n\njest.mock('@/components/FileUpload/ResponseFileUpload', () => {\n  return function MockResponseFileUpload() {\n    return <div data-testid=\"response-file-upload\">Response File Upload</div>;\n  };\n});\n\n// Mock the useErrorHandler hook\njest.mock('@/utils/errorHandler', () => ({\n  useErrorHandler: () => ({\n    handleFileUploadError: jest.fn(),\n    showSuccess: jest.fn()\n  })\n}));\n\ndescribe('FileUploadContainer', () => {\n  const mockOnFilesUploaded = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should render correctly', () => {\n    render(<FileUploadContainer onFilesUploaded={mockOnFilesUploaded} />);\n    \n    expect(screen.getByTestId('survey-file-upload')).toBeInTheDocument();\n    expect(screen.getByTestId('response-file-upload')).toBeInTheDocument();\n    expect(screen.getByText('Lancer l\\'analyse')).toBeInTheDocument();\n  });\n\n  it('should disable the process button initially', () => {\n    render(<FileUploadContainer onFilesUploaded={mockOnFilesUploaded} />);\n    \n    const processButton = screen.getByText('Lancer l\\'analyse');\n    expect(processButton).toBeDisabled();\n  });\n});